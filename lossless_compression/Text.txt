//print for debug
		for (auto iter = q1.begin(); iter != q1.end(); ++iter)
		{
			huffnode tmp = *iter;
			std::cout << tmp.weight << "  ";
		}
		std::cout << std::endl;
		for (auto iter = q2.begin(); iter != q2.end(); ++iter)
		{
			huffnode tmp = *iter;
			std::cout << tmp.weight << "  ";
		}
		std::cout << std::endl;

		//print encodings
	std::cout << "generated huffman encodings:" << std::endl;
	for (size_t i = 0; i < 256; i++)
	{
		if (code_len[i] > 0) std::cout << (BYTE)i << "   " << (UINT)code_len[i] << ": " << std::bitset<16>(code[i]) << std::endl;
	}

	//test
	BYTE buffer[65532];
	bit_stream data_stream2(leaf_vals);
	huff_node* root_node = q2.front();
	huff_node* currnode = root_node;
	BYTE* currbyte = buffer;
	for (UINT i = 0; i < data_stream.bits_touched(); i++)
	{
		BYTE bit = data_stream2.read_bit();

		if (bit) { currnode = currnode->right; }
		else { currnode = currnode->left; }
		
		if (currnode->left == NULL) {
			*currbyte++ = currnode->val;
			currnode = root_node;
		}
	}

	for (UINT i = 0; i < currbyte-buffer; i++)
	{
		std::cout << buffer[i];
	}
	std::cout << std::endl;

	print_tree(root_node);
	//end test

	void print_tree_help(std::vector<std::vector<BYTE>>& arr, UINT root_offset, tree_node* nodes, BYTE depth)
{
	if (arr.size() >= depth) { std::vector<BYTE> a; arr.push_back(a); }
	arr[depth].push_back(nodes[root_offset].val);
	for (BYTE i = 0; i < 16; i++)
	{
		if (nodes[root_offset].children_offset[i] != 0)
		{
			print_tree_help(arr, nodes[root_offset].children_offset[i], nodes, depth + 1);
		}
	}
}
void print_tree(UINT root_offset, tree_node* nodes)
{
	std::cout << "tree: " << std::endl;
	std::vector<std::vector<BYTE>> arr;
	print_tree_help(arr, root_offset, nodes, 0);
	for (BYTE i = 0; i < arr.size(); i++)
	{
		for (UINT j = 0; j < arr[i].size(); j++)
		{
			std::cout << "|" << std::bitset<8>(arr[i][j]) << "|  ";
		}
		std::cout << std::endl;
	}
}


void print_nibbles(UINT N, BYTE* nibbles)
{
	std::cout << "print nibbles:" << std::endl;
	for (UINT i = 0; i < N; i++)
	{
		std::cout << std::bitset<8>(nibbles[i]) << "  ";
	}
	std::cout << std::endl;
}
